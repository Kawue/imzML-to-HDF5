# -*- coding: UTF-8

import argparse
import numpy as np
import pandas as pd
import os
from mir_parser import MirParser
import bisect


def select_peaks_from_msi_frame(msi_frame, mir_path):

	peaks = sorted(MirParser(mir_path).parse_peaks())

	selection = np.zeros((msi_frame.shape[0], len(peaks)))

	for index, (start, stop) in enumerate(peaks):
		selection[:, index] = msi_frame.loc[: , start:stop].sum(axis=1)

	# Unaligned representatives
	#peak_list = np.around(np.mean(peaks, axis=1), decimals=3)

	# Use Median as representative
	peak_list = np.array([
		np.around(
			np.median(
				msi_frame.columns[bisect.bisect_left(msi_frame.columns, start):bisect.bisect_right(msi_frame.columns, stop)]), decimals=3)
		for start, stop in peaks])

	selection_frame = pd.DataFrame(selection, index=msi_frame.index, columns=peak_list)

	return selection_frame



def reduce_msi_frame_to_peak_selection(imzml_file_path, out_path):
	h5_load_path = '/vol/hsi-data/wuellems/17062016_N5203_MAPS_neg.h5'

	dataset_name, _ = os.path.splitext(os.path.basename(h5_load_path))

	# And this is the data
	msi_frame_name = 'msi_frame_' + dataset_name
	msi_frame = pd.read_hdf(h5_load_path, msi_frame_name)

	mz_selection_path = '/vol/hsi-data/wuellems/'

	peaks_path = mz_selection_path + '{}_{}.txt'.format(dataset_name, 'peaks')
	with open(peaks_path) as f:
		peaks = np.array([float(l) for l in f.readlines()])

	tolerances_path = mz_selection_path + '{}_{}.txt'.format(dataset_name, 'tolerance')
	with open(tolerances_path) as f:
		tolerances = np.array([map(float, l.split(',')) for l in f.readlines()])

	selection = np.zeros((peaks.size, msi_frame.shape[1]))
	for index, (start, stop) in enumerate(tolerances):
		selection[index] = msi_frame[start:stop].sum()
	selection_frame = pd.DataFrame(selection, index=peaks, columns=msi_frame.columns)


	h5_save_path = mz_selection_path + 'msi_frame_{}_{}.h5'.format(dataset_name, '{}-peaks'.format(peaks.size))
	selection_frame.to_hdf(h5_save_path, dataset_name, complevel=9, complib='blosc')
	print('Output written to: {}'.format(h5_save_path))


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='Reduce msi h5 file to provided peak selection.')
	parser.add_argument('-h', action='store', dest='h5_load_path',
						help='Path to the input msi file in h5 format (generated by msiproc.py).')
	parser.add_argument('-o', action='store', dest='out_path',
						help='Path to the output directory.')

	args = parser.parse_args()
	try:
		reduce_msi_frame_to_peak_selection(args.h5_load_path, args.out_path)
	except:
		parser.print_help()
